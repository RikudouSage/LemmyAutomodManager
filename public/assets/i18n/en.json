{
  "app.version": "Version: {{appVersion}}",
  "app.home": "Home",
  "app.welcome_text": "[p]This is a UI manager for the [link:sourceLink]Lemmy Automod by RikudouSage[/link]. [b]It should never be accessible over the internet, make sure you're accessing it over an internal network, you have basic auth in front etc.[/b][/p][p]Please choose the item you want to configure from the left menu. The changes you do here will take effect immediately.[/p]",
  "app.description": "Description",
  "app.items": "Items",
  "app.add_new": "Add new",
  "app.save": "Save",
  "app.remove": "Remove",
  "app.actions": "Actions",
  "app.cancel": "Cancel",
  "app.info": "Info",
  "app.value": "Value",
  "app.na": "N/A",
  "app.yes": "Yes",
  "app.no": "No",
  "app.no_items": "There's nothing available. Why don't you add a new rule?",

  "app.info.user_id_username_instance_mix_info": "In the form below you can fill out the [b]username[/b], [b]instance[/b] and [b]user id[/b], but you don't have to fill out all of them. The only field needed is the [b]user id[/b], but if you don't want to look it up, you can fill out [b]both username and instance[/b] and the user id will be fetched automatically when the rule is evaluated.",

  "app.error": "Error",
  "app.error.invalid_form": "The form is not valid.",
  "app.error.failed_saving": "There was an error while saving the item, please try again later.",
  "app.error.failed_removing": "There was an error while removing the item, please try again later.",
  "app.error.invalid_url": "The provided URL is not valid.",
  "app.error.failed_calculating_hash": "Calculating the hash failed.",

  "app.success": "Success",
  "app.success.item_created": "The item was successfully created.",
  "app.success.item_updated": "The item was successfully updated.",
  "app.success.item_removed": "The item was successfully removed.",

  "app.column.id": "ID",
  "app.column.regex": "Regex",
  "app.column.regex.description": "The regex that will be used to do the matching. It follows the PHP (PCRE2) rules and is always case insensitive. You can use [link:regex101]regex101.com[/link] for syntax highlighting.",
  "app.column.reason": "Reason",
  "app.column.reason.description": "The content of this field will be sent to Lemmy as the reason and will be visible in the Modlog",
  "app.column.enabled": "Enabled",
  "app.column.enabled.description": "Whether this rule is enabled or not, disabled rules are skipped entirely.",
  "app.column.remove_all": "Remove all",
  "app.column.remove_all.description": "When enabled, all posts and comments by the user will be removed as well. If unchecked, only the offending post/comment will be removed in addition to the user being banned.",
  "app.column.similarity_percent": "Similarity (%)",
  "app.column.similarity_percent.description": "How similar do the images need to be to trigger this rule.",
  "app.column.description": "Description",
  "app.column.description.description": "An internal description for this image, this will only be visible in notifications if you have any enabled.",
  "app.column.image_hash": "Image hash",
  "app.column.image_hash.description": "The calculated image hash, you can use the button below to calculate the hash for an image.",
  "app.column.username": "Username",
  "app.column.username.description": "The username without instance of the target user.",
  "app.column.instance": "Instance",
  "app.column.instance.description": "The instance domain of the target user.",
  "app.column.user_id": "User ID",
  "app.column.user_id.description": "The user id of the target user, this is an internal id that's not very visible on the UI, but it can be fetched using api or from the database.",

  "app.stats.name": "Stats & config",
  "app.stats.in_queue": "Jobs to process",
  "app.stats.notification_channels": "Notification channels",
  "app.stats.no_notification_channels": "No notification channels enabled.",
  "app.stats.notification_users": "Lemmy notification users",
  "app.stats.notify_new_users": "Notify about new users",
  "app.stats.notify_first_post_comment": "Notify about user's first post/comment",
  "app.stats.notify_reports": "Notify about reports",
  "app.stats.fediseer_enabled": "Fediseer integration",
  "app.stats.ai_horde_enabled": "AI Horde integration",
  "app.stats.signed_webhooks_enabled": "Requires signed webhook calls",
  "app.stats.log_level": "Logging level",

  "app.ban_regexes.name": "Ban regexes",
  "app.ban_regexes.description": "The regexes specified here are checked when a post or comment gets created or updated, the fields checked are: post title, post body, post url, author name and author display name for posts, comment content and author name and display name for comments. The fields are also transliterated to latin characters, so the rules run on both the original form and transliterated latin form which helps with common tactic of using UTF-8 characters instead of regular letters.",
  "app.ban_regexes.edit.title": "Edit ban regex with id '{{id}}'",
  "app.ban_regexes.add.title": "Add a new ban regex",

  "app.banned_emails.name": "Banned emails",
  "app.banned_emails.description": "The regexes in this section are evaluated when a new user registers and their email address is checked against them.",
  "app.banned_emails.edit.title": "Edit email ban with id '{{id}}'",
  "app.banned_emails.add.title": "Add a new email ban",

  "app.private_message_bans.name": "Private message bans",
  "app.private_message_bans.description": "The regexes here are checked against the content of each private message that's being sent from or to your instance's users.",
  "app.private_message_bans.edit.title": "Edit private message ban regex with id '{{id}}'",
  "app.private_message_bans.add.title": "Add private message ban regex",

  "app.banned_images.name": "Banned images",
  "app.banned_images.description": "Uses hashing for images based on their content and then compares them to each posts URL, if it looks like it contains an image. Might slow down operations because it has to download each and every image and then hash it.",
  "app.banned_images.edit.title": "Edit image ban with id '{{id}}'",
  "app.banned_images.add.title": "Add a new image ban",
  "app.banned_images.calculate_button": "Calculate from URL",
  "app.banned_images.calculate.image_url": "Image URL",

  "app.watched_users.name": "Watched users",
  "app.watched_users.description": "The users in this table are actively watched and any post or comment by them is sent to you using the notification channels you have configured, additionally any report of a private message, post or comment by them is also sent to you.",
  "app.watched_users.edit.title": "Edit watched user with id '{{id}}'",
  "app.watched_users.add.title": "Add watched user",

  "app.trusted_users.name": "Trusted users",
  "app.trusted_users.description": "Any report by a person in this table gets automatically resolved and the offending content removed. The content only gets removed, the creator is [b]not[/b] banned.",
  "app.trusted_users.edit.title": "Edit trusted user with id '{{id}}'",
  "app.trusted_users.add.title": "Add trusted user",

  "app.ignored_users.name": "Ignored users",
  "app.ignored_users.description": "Posts and comments made by users in this table are skipped when analyzing. Useful for various bots you control.",
  "app.ignored_users.edit.title": "Edit ignored user with id '{{id}}'",
  "app.ignored_users.add.title": "Add ignored user",

  "app.qr_code_bans.name": "Banned QR codes",
  "app.qr_code_bans.description": "Every post url that contains an image is scanned for QR codes and if a QR code matches any of the regexes below, the user is banned.",
  "app.qr_code_bans.edit.title": "Edit banned qr code with id '{{id}}'",
  "app.qr_code_bans.add.title": "Add banned qr code"
}
